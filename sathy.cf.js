// Generated by CoffeeScript 1.7.1
var __hasProp = {}.hasOwnProperty;

(function(window) {
  var sathy, toString;
  toString = Object.prototype.toString;
  sathy = function(selector) {};
  sathy.prototype.extend = sathy.extend = function(config, defaults) {
    var key, obj, val;
    if (!arguments.length) {
      return this;
    }
    obj = {};
    if (arguments.length === 1) {
      obj = this;
    }
    if (config) {
      for (key in config) {
        val = config[key];
        obj[key] = val;
      }
      if (defaults) {
        for (key in defaults) {
          val = defaults[key];
          if (obj[key] === void 0) {
            obj[key] = val;
          }
        }
      }
    }
    return obj;
  };
  sathy.extend({
    isArray: function(val) {
      return toString.call(val) === '[object Array]';
    },
    isArrayLike: function(val) {
      return val && (this.isArray(val) || (typeof val.length === 'number' && parseInt(val.length, 10) === val.length && val.length >= 0));
    },
    each: function(arr, fn, context) {
      var k, v, _i, _len;
      if (arr && fn) {
        if (this.isArrayLike(arr)) {
          for (k = _i = 0, _len = arr.length; _i < _len; k = ++_i) {
            v = arr[k];
            fn.call(context || v, v, k);
          }
        } else {
          for (k in arr) {
            if (!__hasProp.call(arr, k)) continue;
            v = arr[k];
            fn.call(context || v, v, k);
          }
        }
      }
    },
    map: function(arr, fn, context) {
      var k, res, v, _i, _len;
      res = [];
      if (arr && fn) {
        if (this.isArrayLike(arr)) {
          for (k = _i = 0, _len = arr.length; _i < _len; k = ++_i) {
            v = arr[k];
            res.push(fn.call(context || v, v, k));
          }
        } else {
          for (k in arr) {
            if (!__hasProp.call(arr, k)) continue;
            v = arr[k];
            res.push(fn.call(context || v, v, k));
          }
        }
      }
      return res;
    }
  });
  return window.sathy = sathy;
})(window);
